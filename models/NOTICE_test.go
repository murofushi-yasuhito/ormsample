// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNOTICES(t *testing.T) {
	t.Parallel()

	query := NOTICES()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNOTICESDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNOTICESQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NOTICES().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNOTICESSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NOTICESlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNOTICESExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NOTICEExists(ctx, tx, o.NOTICE_ID)
	if err != nil {
		t.Errorf("Unable to check if NOTICE exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NOTICEExists to return true, but got false.")
	}
}

func testNOTICESFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nOTICEFound, err := FindNOTICE(ctx, tx, o.NOTICE_ID)
	if err != nil {
		t.Error(err)
	}

	if nOTICEFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNOTICESBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NOTICES().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNOTICESOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NOTICES().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNOTICESAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nOTICEOne := &NOTICE{}
	nOTICETwo := &NOTICE{}
	if err = randomize.Struct(seed, nOTICEOne, nOTICEDBTypes, false, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}
	if err = randomize.Struct(seed, nOTICETwo, nOTICEDBTypes, false, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nOTICEOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nOTICETwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NOTICES().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNOTICESCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nOTICEOne := &NOTICE{}
	nOTICETwo := &NOTICE{}
	if err = randomize.Struct(seed, nOTICEOne, nOTICEDBTypes, false, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}
	if err = randomize.Struct(seed, nOTICETwo, nOTICEDBTypes, false, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nOTICEOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nOTICETwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func nOTICEBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NOTICE) error {
	*o = NOTICE{}
	return nil
}

func nOTICEAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NOTICE) error {
	*o = NOTICE{}
	return nil
}

func nOTICEAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NOTICE) error {
	*o = NOTICE{}
	return nil
}

func nOTICEBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NOTICE) error {
	*o = NOTICE{}
	return nil
}

func nOTICEAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NOTICE) error {
	*o = NOTICE{}
	return nil
}

func nOTICEBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NOTICE) error {
	*o = NOTICE{}
	return nil
}

func nOTICEAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NOTICE) error {
	*o = NOTICE{}
	return nil
}

func nOTICEBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NOTICE) error {
	*o = NOTICE{}
	return nil
}

func nOTICEAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NOTICE) error {
	*o = NOTICE{}
	return nil
}

func testNOTICESHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NOTICE{}
	o := &NOTICE{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nOTICEDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NOTICE object: %s", err)
	}

	AddNOTICEHook(boil.BeforeInsertHook, nOTICEBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nOTICEBeforeInsertHooks = []NOTICEHook{}

	AddNOTICEHook(boil.AfterInsertHook, nOTICEAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nOTICEAfterInsertHooks = []NOTICEHook{}

	AddNOTICEHook(boil.AfterSelectHook, nOTICEAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nOTICEAfterSelectHooks = []NOTICEHook{}

	AddNOTICEHook(boil.BeforeUpdateHook, nOTICEBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nOTICEBeforeUpdateHooks = []NOTICEHook{}

	AddNOTICEHook(boil.AfterUpdateHook, nOTICEAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nOTICEAfterUpdateHooks = []NOTICEHook{}

	AddNOTICEHook(boil.BeforeDeleteHook, nOTICEBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nOTICEBeforeDeleteHooks = []NOTICEHook{}

	AddNOTICEHook(boil.AfterDeleteHook, nOTICEAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nOTICEAfterDeleteHooks = []NOTICEHook{}

	AddNOTICEHook(boil.BeforeUpsertHook, nOTICEBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nOTICEBeforeUpsertHooks = []NOTICEHook{}

	AddNOTICEHook(boil.AfterUpsertHook, nOTICEAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nOTICEAfterUpsertHooks = []NOTICEHook{}
}

func testNOTICESInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNOTICESInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nOTICEColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNOTICESReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNOTICESReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NOTICESlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNOTICESSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NOTICES().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nOTICEDBTypes = map[string]string{`NOTICE_ID`: `int`, `OEM_ID`: `int`, `TITLE`: `varchar`, `BODY`: `varchar`, `PRE_DTE`: `datetime`, `DELE_FLG`: `char`, `UPDA_DTE`: `timestamp`, `UPDA_USER_ID`: `int`, `CREA_DTE`: `timestamp`, `CREA_USER_ID`: `int`}
	_             = bytes.MinRead
)

func testNOTICESUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nOTICEPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nOTICEAllColumns) == len(nOTICEPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNOTICESSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nOTICEAllColumns) == len(nOTICEPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NOTICE{}
	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nOTICEDBTypes, true, nOTICEPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nOTICEAllColumns, nOTICEPrimaryKeyColumns) {
		fields = nOTICEAllColumns
	} else {
		fields = strmangle.SetComplement(
			nOTICEAllColumns,
			nOTICEPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NOTICESlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNOTICESUpsert(t *testing.T) {
	t.Parallel()

	if len(nOTICEAllColumns) == len(nOTICEPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLNOTICEUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NOTICE{}
	if err = randomize.Struct(seed, &o, nOTICEDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NOTICE: %s", err)
	}

	count, err := NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, nOTICEDBTypes, false, nOTICEPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NOTICE struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NOTICE: %s", err)
	}

	count, err = NOTICES().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
