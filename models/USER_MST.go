// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// USER_MST is an object representing the database table.
type USER_MST struct { // ユーザID
	USER_ID int `boil:"USER_ID" json:"USER_ID" toml:"USER_ID" yaml:"USER_ID"`
	// クライアントID
	CLIENT_ID int `boil:"CLIENT_ID" json:"CLIENT_ID" toml:"CLIENT_ID" yaml:"CLIENT_ID"`
	// ユーザ番号
	USER_NO string `boil:"USER_NO" json:"USER_NO" toml:"USER_NO" yaml:"USER_NO"`
	// ユーザ名
	USER_NM string `boil:"USER_NM" json:"USER_NM" toml:"USER_NM" yaml:"USER_NM"`
	// ユーザ名カナ
	USER_NMC null.String `boil:"USER_NMC" json:"USER_NMC,omitempty" toml:"USER_NMC" yaml:"USER_NMC,omitempty"`
	// ログインID
	LOGIN_ID null.String `boil:"LOGIN_ID" json:"LOGIN_ID,omitempty" toml:"LOGIN_ID" yaml:"LOGIN_ID,omitempty"`
	PASSWD   null.Bytes  `boil:"PASSWD" json:"PASSWD,omitempty" toml:"PASSWD" yaml:"PASSWD,omitempty"`
	// 全社権限
	CLIENT_AUTH_KBN null.Int `boil:"CLIENT_AUTH_KBN" json:"CLIENT_AUTH_KBN,omitempty" toml:"CLIENT_AUTH_KBN" yaml:"CLIENT_AUTH_KBN,omitempty"`
	// 起動通知フラグ	 0:通知しない 1:通知する
	START_MAIL_FLG null.String `boil:"START_MAIL_FLG" json:"START_MAIL_FLG,omitempty" toml:"START_MAIL_FLG" yaml:"START_MAIL_FLG,omitempty"`
	// 一括処理通知フラグ	 0:通知しない 1:通知する
	IKKATU_MAIL_FLG null.String `boil:"IKKATU_MAIL_FLG" json:"IKKATU_MAIL_FLG,omitempty" toml:"IKKATU_MAIL_FLG" yaml:"IKKATU_MAIL_FLG,omitempty"`
	// 都道府県コード	 居住地都道府県
	PREF_CD null.String `boil:"PREF_CD" json:"PREF_CD,omitempty" toml:"PREF_CD" yaml:"PREF_CD,omitempty"`
	// 市区町村コード	 居住地市区町村
	CITY_CD null.String `boil:"CITY_CD" json:"CITY_CD,omitempty" toml:"CITY_CD" yaml:"CITY_CD,omitempty"`
	// メールステータス
	MAIL_STS null.String `boil:"MAIL_STS" json:"MAIL_STS,omitempty" toml:"MAIL_STS" yaml:"MAIL_STS,omitempty"`
	// 一括処理中フラグ
	BATCH_FLG string `boil:"BATCH_FLG" json:"BATCH_FLG" toml:"BATCH_FLG" yaml:"BATCH_FLG"`
	// トークン
	TOKEN null.String `boil:"TOKEN" json:"TOKEN,omitempty" toml:"TOKEN" yaml:"TOKEN,omitempty"`
	// デバイスタイプ
	DEVICE_TYPE null.String `boil:"DEVICE_TYPE" json:"DEVICE_TYPE,omitempty" toml:"DEVICE_TYPE" yaml:"DEVICE_TYPE,omitempty"`
	MEMO        null.String `boil:"MEMO" json:"MEMO,omitempty" toml:"MEMO" yaml:"MEMO,omitempty"`
	// パートナーフラグ 0:社員 1:パートナー（集計から除外する）
	PARTNER_FLG string `boil:"PARTNER_FLG" json:"PARTNER_FLG" toml:"PARTNER_FLG" yaml:"PARTNER_FLG"`
	// ステータスChecker連携ユーザフラグ
	SC_USER_LINK_FLG null.String `boil:"SC_USER_LINK_FLG" json:"SC_USER_LINK_FLG,omitempty" toml:"SC_USER_LINK_FLG" yaml:"SC_USER_LINK_FLG,omitempty"`
	// ステータスChecker全拠点権限
	SC_MNG_AUTH null.String `boil:"SC_MNG_AUTH" json:"SC_MNG_AUTH,omitempty" toml:"SC_MNG_AUTH" yaml:"SC_MNG_AUTH,omitempty"`
	// ステータスChecker電話番号
	SC_TEL_NUM null.String `boil:"SC_TEL_NUM" json:"SC_TEL_NUM,omitempty" toml:"SC_TEL_NUM" yaml:"SC_TEL_NUM,omitempty"`
	// 指定部署権限
	DESIG_DEPT_AUTH_KBN int `boil:"DESIG_DEPT_AUTH_KBN" json:"DESIG_DEPT_AUTH_KBN" toml:"DESIG_DEPT_AUTH_KBN" yaml:"DESIG_DEPT_AUTH_KBN"`
	// ユーザ非作成パスワード（0:ユーザにて変更済み 1:初期または管理者作成のパスワード）
	INIT_PASSWD_FLG string `boil:"INIT_PASSWD_FLG" json:"INIT_PASSWD_FLG" toml:"INIT_PASSWD_FLG" yaml:"INIT_PASSWD_FLG"`
	// ワンタイムパスワード
	ONE_TIME_PASSWD null.String `boil:"ONE_TIME_PASSWD" json:"ONE_TIME_PASSWD,omitempty" toml:"ONE_TIME_PASSWD" yaml:"ONE_TIME_PASSWD,omitempty"`
	// ワンタイムパスワード有効期限
	ONE_TIME_EXPIRY null.Time `boil:"ONE_TIME_EXPIRY" json:"ONE_TIME_EXPIRY,omitempty" toml:"ONE_TIME_EXPIRY" yaml:"ONE_TIME_EXPIRY,omitempty"`
	// 更新日時
	UPDA_DTE time.Time `boil:"UPDA_DTE" json:"UPDA_DTE" toml:"UPDA_DTE" yaml:"UPDA_DTE"`
	// 更新者ID
	UPDA_USER_ID int `boil:"UPDA_USER_ID" json:"UPDA_USER_ID" toml:"UPDA_USER_ID" yaml:"UPDA_USER_ID"`
	// 作成日時
	CREA_DTE time.Time `boil:"CREA_DTE" json:"CREA_DTE" toml:"CREA_DTE" yaml:"CREA_DTE"`
	// 作成者ID
	CREA_USER_ID int      `boil:"CREA_USER_ID" json:"CREA_USER_ID" toml:"CREA_USER_ID" yaml:"CREA_USER_ID"`
	START_GRP_ID null.Int `boil:"START_GRP_ID" json:"START_GRP_ID,omitempty" toml:"START_GRP_ID" yaml:"START_GRP_ID,omitempty"`

	R *uSERMSTR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uSERMSTL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var USER_MSTColumns = struct {
	USER_ID             string
	CLIENT_ID           string
	USER_NO             string
	USER_NM             string
	USER_NMC            string
	LOGIN_ID            string
	PASSWD              string
	CLIENT_AUTH_KBN     string
	START_MAIL_FLG      string
	IKKATU_MAIL_FLG     string
	PREF_CD             string
	CITY_CD             string
	MAIL_STS            string
	BATCH_FLG           string
	TOKEN               string
	DEVICE_TYPE         string
	MEMO                string
	PARTNER_FLG         string
	SC_USER_LINK_FLG    string
	SC_MNG_AUTH         string
	SC_TEL_NUM          string
	DESIG_DEPT_AUTH_KBN string
	INIT_PASSWD_FLG     string
	ONE_TIME_PASSWD     string
	ONE_TIME_EXPIRY     string
	UPDA_DTE            string
	UPDA_USER_ID        string
	CREA_DTE            string
	CREA_USER_ID        string
	START_GRP_ID        string
}{
	USER_ID:             "USER_ID",
	CLIENT_ID:           "CLIENT_ID",
	USER_NO:             "USER_NO",
	USER_NM:             "USER_NM",
	USER_NMC:            "USER_NMC",
	LOGIN_ID:            "LOGIN_ID",
	PASSWD:              "PASSWD",
	CLIENT_AUTH_KBN:     "CLIENT_AUTH_KBN",
	START_MAIL_FLG:      "START_MAIL_FLG",
	IKKATU_MAIL_FLG:     "IKKATU_MAIL_FLG",
	PREF_CD:             "PREF_CD",
	CITY_CD:             "CITY_CD",
	MAIL_STS:            "MAIL_STS",
	BATCH_FLG:           "BATCH_FLG",
	TOKEN:               "TOKEN",
	DEVICE_TYPE:         "DEVICE_TYPE",
	MEMO:                "MEMO",
	PARTNER_FLG:         "PARTNER_FLG",
	SC_USER_LINK_FLG:    "SC_USER_LINK_FLG",
	SC_MNG_AUTH:         "SC_MNG_AUTH",
	SC_TEL_NUM:          "SC_TEL_NUM",
	DESIG_DEPT_AUTH_KBN: "DESIG_DEPT_AUTH_KBN",
	INIT_PASSWD_FLG:     "INIT_PASSWD_FLG",
	ONE_TIME_PASSWD:     "ONE_TIME_PASSWD",
	ONE_TIME_EXPIRY:     "ONE_TIME_EXPIRY",
	UPDA_DTE:            "UPDA_DTE",
	UPDA_USER_ID:        "UPDA_USER_ID",
	CREA_DTE:            "CREA_DTE",
	CREA_USER_ID:        "CREA_USER_ID",
	START_GRP_ID:        "START_GRP_ID",
}

var USER_MSTTableColumns = struct {
	USER_ID             string
	CLIENT_ID           string
	USER_NO             string
	USER_NM             string
	USER_NMC            string
	LOGIN_ID            string
	PASSWD              string
	CLIENT_AUTH_KBN     string
	START_MAIL_FLG      string
	IKKATU_MAIL_FLG     string
	PREF_CD             string
	CITY_CD             string
	MAIL_STS            string
	BATCH_FLG           string
	TOKEN               string
	DEVICE_TYPE         string
	MEMO                string
	PARTNER_FLG         string
	SC_USER_LINK_FLG    string
	SC_MNG_AUTH         string
	SC_TEL_NUM          string
	DESIG_DEPT_AUTH_KBN string
	INIT_PASSWD_FLG     string
	ONE_TIME_PASSWD     string
	ONE_TIME_EXPIRY     string
	UPDA_DTE            string
	UPDA_USER_ID        string
	CREA_DTE            string
	CREA_USER_ID        string
	START_GRP_ID        string
}{
	USER_ID:             "USER_MST.USER_ID",
	CLIENT_ID:           "USER_MST.CLIENT_ID",
	USER_NO:             "USER_MST.USER_NO",
	USER_NM:             "USER_MST.USER_NM",
	USER_NMC:            "USER_MST.USER_NMC",
	LOGIN_ID:            "USER_MST.LOGIN_ID",
	PASSWD:              "USER_MST.PASSWD",
	CLIENT_AUTH_KBN:     "USER_MST.CLIENT_AUTH_KBN",
	START_MAIL_FLG:      "USER_MST.START_MAIL_FLG",
	IKKATU_MAIL_FLG:     "USER_MST.IKKATU_MAIL_FLG",
	PREF_CD:             "USER_MST.PREF_CD",
	CITY_CD:             "USER_MST.CITY_CD",
	MAIL_STS:            "USER_MST.MAIL_STS",
	BATCH_FLG:           "USER_MST.BATCH_FLG",
	TOKEN:               "USER_MST.TOKEN",
	DEVICE_TYPE:         "USER_MST.DEVICE_TYPE",
	MEMO:                "USER_MST.MEMO",
	PARTNER_FLG:         "USER_MST.PARTNER_FLG",
	SC_USER_LINK_FLG:    "USER_MST.SC_USER_LINK_FLG",
	SC_MNG_AUTH:         "USER_MST.SC_MNG_AUTH",
	SC_TEL_NUM:          "USER_MST.SC_TEL_NUM",
	DESIG_DEPT_AUTH_KBN: "USER_MST.DESIG_DEPT_AUTH_KBN",
	INIT_PASSWD_FLG:     "USER_MST.INIT_PASSWD_FLG",
	ONE_TIME_PASSWD:     "USER_MST.ONE_TIME_PASSWD",
	ONE_TIME_EXPIRY:     "USER_MST.ONE_TIME_EXPIRY",
	UPDA_DTE:            "USER_MST.UPDA_DTE",
	UPDA_USER_ID:        "USER_MST.UPDA_USER_ID",
	CREA_DTE:            "USER_MST.CREA_DTE",
	CREA_USER_ID:        "USER_MST.CREA_USER_ID",
	START_GRP_ID:        "USER_MST.START_GRP_ID",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var USER_MSTWhere = struct {
	USER_ID             whereHelperint
	CLIENT_ID           whereHelperint
	USER_NO             whereHelperstring
	USER_NM             whereHelperstring
	USER_NMC            whereHelpernull_String
	LOGIN_ID            whereHelpernull_String
	PASSWD              whereHelpernull_Bytes
	CLIENT_AUTH_KBN     whereHelpernull_Int
	START_MAIL_FLG      whereHelpernull_String
	IKKATU_MAIL_FLG     whereHelpernull_String
	PREF_CD             whereHelpernull_String
	CITY_CD             whereHelpernull_String
	MAIL_STS            whereHelpernull_String
	BATCH_FLG           whereHelperstring
	TOKEN               whereHelpernull_String
	DEVICE_TYPE         whereHelpernull_String
	MEMO                whereHelpernull_String
	PARTNER_FLG         whereHelperstring
	SC_USER_LINK_FLG    whereHelpernull_String
	SC_MNG_AUTH         whereHelpernull_String
	SC_TEL_NUM          whereHelpernull_String
	DESIG_DEPT_AUTH_KBN whereHelperint
	INIT_PASSWD_FLG     whereHelperstring
	ONE_TIME_PASSWD     whereHelpernull_String
	ONE_TIME_EXPIRY     whereHelpernull_Time
	UPDA_DTE            whereHelpertime_Time
	UPDA_USER_ID        whereHelperint
	CREA_DTE            whereHelpertime_Time
	CREA_USER_ID        whereHelperint
	START_GRP_ID        whereHelpernull_Int
}{
	USER_ID:             whereHelperint{field: "`USER_MST`.`USER_ID`"},
	CLIENT_ID:           whereHelperint{field: "`USER_MST`.`CLIENT_ID`"},
	USER_NO:             whereHelperstring{field: "`USER_MST`.`USER_NO`"},
	USER_NM:             whereHelperstring{field: "`USER_MST`.`USER_NM`"},
	USER_NMC:            whereHelpernull_String{field: "`USER_MST`.`USER_NMC`"},
	LOGIN_ID:            whereHelpernull_String{field: "`USER_MST`.`LOGIN_ID`"},
	PASSWD:              whereHelpernull_Bytes{field: "`USER_MST`.`PASSWD`"},
	CLIENT_AUTH_KBN:     whereHelpernull_Int{field: "`USER_MST`.`CLIENT_AUTH_KBN`"},
	START_MAIL_FLG:      whereHelpernull_String{field: "`USER_MST`.`START_MAIL_FLG`"},
	IKKATU_MAIL_FLG:     whereHelpernull_String{field: "`USER_MST`.`IKKATU_MAIL_FLG`"},
	PREF_CD:             whereHelpernull_String{field: "`USER_MST`.`PREF_CD`"},
	CITY_CD:             whereHelpernull_String{field: "`USER_MST`.`CITY_CD`"},
	MAIL_STS:            whereHelpernull_String{field: "`USER_MST`.`MAIL_STS`"},
	BATCH_FLG:           whereHelperstring{field: "`USER_MST`.`BATCH_FLG`"},
	TOKEN:               whereHelpernull_String{field: "`USER_MST`.`TOKEN`"},
	DEVICE_TYPE:         whereHelpernull_String{field: "`USER_MST`.`DEVICE_TYPE`"},
	MEMO:                whereHelpernull_String{field: "`USER_MST`.`MEMO`"},
	PARTNER_FLG:         whereHelperstring{field: "`USER_MST`.`PARTNER_FLG`"},
	SC_USER_LINK_FLG:    whereHelpernull_String{field: "`USER_MST`.`SC_USER_LINK_FLG`"},
	SC_MNG_AUTH:         whereHelpernull_String{field: "`USER_MST`.`SC_MNG_AUTH`"},
	SC_TEL_NUM:          whereHelpernull_String{field: "`USER_MST`.`SC_TEL_NUM`"},
	DESIG_DEPT_AUTH_KBN: whereHelperint{field: "`USER_MST`.`DESIG_DEPT_AUTH_KBN`"},
	INIT_PASSWD_FLG:     whereHelperstring{field: "`USER_MST`.`INIT_PASSWD_FLG`"},
	ONE_TIME_PASSWD:     whereHelpernull_String{field: "`USER_MST`.`ONE_TIME_PASSWD`"},
	ONE_TIME_EXPIRY:     whereHelpernull_Time{field: "`USER_MST`.`ONE_TIME_EXPIRY`"},
	UPDA_DTE:            whereHelpertime_Time{field: "`USER_MST`.`UPDA_DTE`"},
	UPDA_USER_ID:        whereHelperint{field: "`USER_MST`.`UPDA_USER_ID`"},
	CREA_DTE:            whereHelpertime_Time{field: "`USER_MST`.`CREA_DTE`"},
	CREA_USER_ID:        whereHelperint{field: "`USER_MST`.`CREA_USER_ID`"},
	START_GRP_ID:        whereHelpernull_Int{field: "`USER_MST`.`START_GRP_ID`"},
}

// USER_MSTRels is where relationship names are stored.
var USER_MSTRels = struct {
}{}

// uSERMSTR is where relationships are stored.
type uSERMSTR struct {
}

// NewStruct creates a new relationship struct
func (*uSERMSTR) NewStruct() *uSERMSTR {
	return &uSERMSTR{}
}

// uSERMSTL is where Load methods for each relationship are stored.
type uSERMSTL struct{}

var (
	uSERMSTAllColumns            = []string{"USER_ID", "CLIENT_ID", "USER_NO", "USER_NM", "USER_NMC", "LOGIN_ID", "PASSWD", "CLIENT_AUTH_KBN", "START_MAIL_FLG", "IKKATU_MAIL_FLG", "PREF_CD", "CITY_CD", "MAIL_STS", "BATCH_FLG", "TOKEN", "DEVICE_TYPE", "MEMO", "PARTNER_FLG", "SC_USER_LINK_FLG", "SC_MNG_AUTH", "SC_TEL_NUM", "DESIG_DEPT_AUTH_KBN", "INIT_PASSWD_FLG", "ONE_TIME_PASSWD", "ONE_TIME_EXPIRY", "UPDA_DTE", "UPDA_USER_ID", "CREA_DTE", "CREA_USER_ID", "START_GRP_ID"}
	uSERMSTColumnsWithoutDefault = []string{"CLIENT_ID", "USER_NO", "USER_NM", "USER_NMC", "LOGIN_ID", "PASSWD", "CLIENT_AUTH_KBN", "PREF_CD", "CITY_CD", "MAIL_STS", "TOKEN", "DEVICE_TYPE", "MEMO", "SC_TEL_NUM", "ONE_TIME_PASSWD", "ONE_TIME_EXPIRY", "UPDA_USER_ID", "CREA_USER_ID", "START_GRP_ID"}
	uSERMSTColumnsWithDefault    = []string{"USER_ID", "START_MAIL_FLG", "IKKATU_MAIL_FLG", "BATCH_FLG", "PARTNER_FLG", "SC_USER_LINK_FLG", "SC_MNG_AUTH", "DESIG_DEPT_AUTH_KBN", "INIT_PASSWD_FLG", "UPDA_DTE", "CREA_DTE"}
	uSERMSTPrimaryKeyColumns     = []string{"USER_ID"}
	uSERMSTGeneratedColumns      = []string{}
)

type (
	// USER_MSTSlice is an alias for a slice of pointers to USER_MST.
	// This should almost always be used instead of []USER_MST.
	USER_MSTSlice []*USER_MST
	// USER_MSTHook is the signature for custom USER_MST hook methods
	USER_MSTHook func(context.Context, boil.ContextExecutor, *USER_MST) error

	uSERMSTQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uSERMSTType                 = reflect.TypeOf(&USER_MST{})
	uSERMSTMapping              = queries.MakeStructMapping(uSERMSTType)
	uSERMSTPrimaryKeyMapping, _ = queries.BindMapping(uSERMSTType, uSERMSTMapping, uSERMSTPrimaryKeyColumns)
	uSERMSTInsertCacheMut       sync.RWMutex
	uSERMSTInsertCache          = make(map[string]insertCache)
	uSERMSTUpdateCacheMut       sync.RWMutex
	uSERMSTUpdateCache          = make(map[string]updateCache)
	uSERMSTUpsertCacheMut       sync.RWMutex
	uSERMSTUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uSERMSTAfterSelectHooks []USER_MSTHook

var uSERMSTBeforeInsertHooks []USER_MSTHook
var uSERMSTAfterInsertHooks []USER_MSTHook

var uSERMSTBeforeUpdateHooks []USER_MSTHook
var uSERMSTAfterUpdateHooks []USER_MSTHook

var uSERMSTBeforeDeleteHooks []USER_MSTHook
var uSERMSTAfterDeleteHooks []USER_MSTHook

var uSERMSTBeforeUpsertHooks []USER_MSTHook
var uSERMSTAfterUpsertHooks []USER_MSTHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *USER_MST) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERMSTAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *USER_MST) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERMSTBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *USER_MST) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERMSTAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *USER_MST) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERMSTBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *USER_MST) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERMSTAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *USER_MST) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERMSTBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *USER_MST) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERMSTAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *USER_MST) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERMSTBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *USER_MST) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uSERMSTAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUSER_MSTHook registers your hook function for all future operations.
func AddUSER_MSTHook(hookPoint boil.HookPoint, uSERMSTHook USER_MSTHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uSERMSTAfterSelectHooks = append(uSERMSTAfterSelectHooks, uSERMSTHook)
	case boil.BeforeInsertHook:
		uSERMSTBeforeInsertHooks = append(uSERMSTBeforeInsertHooks, uSERMSTHook)
	case boil.AfterInsertHook:
		uSERMSTAfterInsertHooks = append(uSERMSTAfterInsertHooks, uSERMSTHook)
	case boil.BeforeUpdateHook:
		uSERMSTBeforeUpdateHooks = append(uSERMSTBeforeUpdateHooks, uSERMSTHook)
	case boil.AfterUpdateHook:
		uSERMSTAfterUpdateHooks = append(uSERMSTAfterUpdateHooks, uSERMSTHook)
	case boil.BeforeDeleteHook:
		uSERMSTBeforeDeleteHooks = append(uSERMSTBeforeDeleteHooks, uSERMSTHook)
	case boil.AfterDeleteHook:
		uSERMSTAfterDeleteHooks = append(uSERMSTAfterDeleteHooks, uSERMSTHook)
	case boil.BeforeUpsertHook:
		uSERMSTBeforeUpsertHooks = append(uSERMSTBeforeUpsertHooks, uSERMSTHook)
	case boil.AfterUpsertHook:
		uSERMSTAfterUpsertHooks = append(uSERMSTAfterUpsertHooks, uSERMSTHook)
	}
}

// One returns a single uSERMST record from the query.
func (q uSERMSTQuery) One(ctx context.Context, exec boil.ContextExecutor) (*USER_MST, error) {
	o := &USER_MST{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for USER_MST")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all USER_MST records from the query.
func (q uSERMSTQuery) All(ctx context.Context, exec boil.ContextExecutor) (USER_MSTSlice, error) {
	var o []*USER_MST

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to USER_MST slice")
	}

	if len(uSERMSTAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all USER_MST records in the query.
func (q uSERMSTQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count USER_MST rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uSERMSTQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if USER_MST exists")
	}

	return count > 0, nil
}

// USERMSTS retrieves all the records using an executor.
func USERMSTS(mods ...qm.QueryMod) uSERMSTQuery {
	mods = append(mods, qm.From("`USER_MST`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`USER_MST`.*"})
	}

	return uSERMSTQuery{q}
}

// FindUSER_MST retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUSER_MST(ctx context.Context, exec boil.ContextExecutor, uSERID int, selectCols ...string) (*USER_MST, error) {
	uSERMSTObj := &USER_MST{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `USER_MST` where `USER_ID`=?", sel,
	)

	q := queries.Raw(query, uSERID)

	err := q.Bind(ctx, exec, uSERMSTObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from USER_MST")
	}

	if err = uSERMSTObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uSERMSTObj, err
	}

	return uSERMSTObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *USER_MST) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no USER_MST provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uSERMSTColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uSERMSTInsertCacheMut.RLock()
	cache, cached := uSERMSTInsertCache[key]
	uSERMSTInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uSERMSTAllColumns,
			uSERMSTColumnsWithDefault,
			uSERMSTColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uSERMSTType, uSERMSTMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uSERMSTType, uSERMSTMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `USER_MST` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `USER_MST` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `USER_MST` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, uSERMSTPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into USER_MST")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.USER_ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == uSERMSTMapping["USER_ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.USER_ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for USER_MST")
	}

CacheNoHooks:
	if !cached {
		uSERMSTInsertCacheMut.Lock()
		uSERMSTInsertCache[key] = cache
		uSERMSTInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the USER_MST.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *USER_MST) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uSERMSTUpdateCacheMut.RLock()
	cache, cached := uSERMSTUpdateCache[key]
	uSERMSTUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uSERMSTAllColumns,
			uSERMSTPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update USER_MST, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `USER_MST` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, uSERMSTPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uSERMSTType, uSERMSTMapping, append(wl, uSERMSTPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update USER_MST row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for USER_MST")
	}

	if !cached {
		uSERMSTUpdateCacheMut.Lock()
		uSERMSTUpdateCache[key] = cache
		uSERMSTUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uSERMSTQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for USER_MST")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for USER_MST")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o USER_MSTSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uSERMSTPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `USER_MST` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uSERMSTPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in uSERMST slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all uSERMST")
	}
	return rowsAff, nil
}

var mySQLUSER_MSTUniqueColumns = []string{
	"USER_ID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *USER_MST) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no USER_MST provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uSERMSTColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUSER_MSTUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uSERMSTUpsertCacheMut.RLock()
	cache, cached := uSERMSTUpsertCache[key]
	uSERMSTUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			uSERMSTAllColumns,
			uSERMSTColumnsWithDefault,
			uSERMSTColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uSERMSTAllColumns,
			uSERMSTPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert USER_MST, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`USER_MST`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `USER_MST` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(uSERMSTType, uSERMSTMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uSERMSTType, uSERMSTMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for USER_MST")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.USER_ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == uSERMSTMapping["USER_ID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(uSERMSTType, uSERMSTMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for USER_MST")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for USER_MST")
	}

CacheNoHooks:
	if !cached {
		uSERMSTUpsertCacheMut.Lock()
		uSERMSTUpsertCache[key] = cache
		uSERMSTUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single USER_MST record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *USER_MST) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no USER_MST provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uSERMSTPrimaryKeyMapping)
	sql := "DELETE FROM `USER_MST` WHERE `USER_ID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from USER_MST")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for USER_MST")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uSERMSTQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uSERMSTQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from USER_MST")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for USER_MST")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o USER_MSTSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uSERMSTBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uSERMSTPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `USER_MST` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uSERMSTPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uSERMST slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for USER_MST")
	}

	if len(uSERMSTAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *USER_MST) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUSER_MST(ctx, exec, o.USER_ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *USER_MSTSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := USER_MSTSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uSERMSTPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `USER_MST`.* FROM `USER_MST` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uSERMSTPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in USER_MSTSlice")
	}

	*o = slice

	return nil
}

// USER_MSTExists checks if the USER_MST row exists.
func USER_MSTExists(ctx context.Context, exec boil.ContextExecutor, uSERID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `USER_MST` where `USER_ID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uSERID)
	}
	row := exec.QueryRowContext(ctx, sql, uSERID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if USER_MST exists")
	}

	return exists, nil
}
