// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUSERMSTS(t *testing.T) {
	t.Parallel()

	query := USERMSTS()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUSERMSTSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUSERMSTSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := USERMSTS().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUSERMSTSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := USER_MSTSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUSERMSTSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := USER_MSTExists(ctx, tx, o.USER_ID)
	if err != nil {
		t.Errorf("Unable to check if USER_MST exists: %s", err)
	}
	if !e {
		t.Errorf("Expected USER_MSTExists to return true, but got false.")
	}
}

func testUSERMSTSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	uSERMSTFound, err := FindUSER_MST(ctx, tx, o.USER_ID)
	if err != nil {
		t.Error(err)
	}

	if uSERMSTFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUSERMSTSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = USERMSTS().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUSERMSTSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := USERMSTS().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUSERMSTSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	uSERMSTOne := &USER_MST{}
	uSERMSTTwo := &USER_MST{}
	if err = randomize.Struct(seed, uSERMSTOne, uSERMSTDBTypes, false, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}
	if err = randomize.Struct(seed, uSERMSTTwo, uSERMSTDBTypes, false, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = uSERMSTOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uSERMSTTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := USERMSTS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUSERMSTSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	uSERMSTOne := &USER_MST{}
	uSERMSTTwo := &USER_MST{}
	if err = randomize.Struct(seed, uSERMSTOne, uSERMSTDBTypes, false, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}
	if err = randomize.Struct(seed, uSERMSTTwo, uSERMSTDBTypes, false, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = uSERMSTOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uSERMSTTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func uSERMSTBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *USER_MST) error {
	*o = USER_MST{}
	return nil
}

func uSERMSTAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *USER_MST) error {
	*o = USER_MST{}
	return nil
}

func uSERMSTAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *USER_MST) error {
	*o = USER_MST{}
	return nil
}

func uSERMSTBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *USER_MST) error {
	*o = USER_MST{}
	return nil
}

func uSERMSTAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *USER_MST) error {
	*o = USER_MST{}
	return nil
}

func uSERMSTBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *USER_MST) error {
	*o = USER_MST{}
	return nil
}

func uSERMSTAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *USER_MST) error {
	*o = USER_MST{}
	return nil
}

func uSERMSTBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *USER_MST) error {
	*o = USER_MST{}
	return nil
}

func uSERMSTAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *USER_MST) error {
	*o = USER_MST{}
	return nil
}

func testUSERMSTSHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &USER_MST{}
	o := &USER_MST{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, false); err != nil {
		t.Errorf("Unable to randomize USER_MST object: %s", err)
	}

	AddUSER_MSTHook(boil.BeforeInsertHook, uSERMSTBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	uSERMSTBeforeInsertHooks = []USER_MSTHook{}

	AddUSER_MSTHook(boil.AfterInsertHook, uSERMSTAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	uSERMSTAfterInsertHooks = []USER_MSTHook{}

	AddUSER_MSTHook(boil.AfterSelectHook, uSERMSTAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	uSERMSTAfterSelectHooks = []USER_MSTHook{}

	AddUSER_MSTHook(boil.BeforeUpdateHook, uSERMSTBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	uSERMSTBeforeUpdateHooks = []USER_MSTHook{}

	AddUSER_MSTHook(boil.AfterUpdateHook, uSERMSTAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	uSERMSTAfterUpdateHooks = []USER_MSTHook{}

	AddUSER_MSTHook(boil.BeforeDeleteHook, uSERMSTBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	uSERMSTBeforeDeleteHooks = []USER_MSTHook{}

	AddUSER_MSTHook(boil.AfterDeleteHook, uSERMSTAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	uSERMSTAfterDeleteHooks = []USER_MSTHook{}

	AddUSER_MSTHook(boil.BeforeUpsertHook, uSERMSTBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	uSERMSTBeforeUpsertHooks = []USER_MSTHook{}

	AddUSER_MSTHook(boil.AfterUpsertHook, uSERMSTAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	uSERMSTAfterUpsertHooks = []USER_MSTHook{}
}

func testUSERMSTSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUSERMSTSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(uSERMSTColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUSERMSTSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUSERMSTSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := USER_MSTSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUSERMSTSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := USERMSTS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	uSERMSTDBTypes = map[string]string{`USER_ID`: `int`, `CLIENT_ID`: `int`, `USER_NO`: `varchar`, `USER_NM`: `varchar`, `USER_NMC`: `varchar`, `LOGIN_ID`: `varchar`, `PASSWD`: `varbinary`, `CLIENT_AUTH_KBN`: `int`, `START_MAIL_FLG`: `char`, `IKKATU_MAIL_FLG`: `char`, `PREF_CD`: `char`, `CITY_CD`: `char`, `MAIL_STS`: `char`, `BATCH_FLG`: `char`, `TOKEN`: `varchar`, `DEVICE_TYPE`: `char`, `MEMO`: `varchar`, `PARTNER_FLG`: `char`, `SC_USER_LINK_FLG`: `char`, `SC_MNG_AUTH`: `char`, `SC_TEL_NUM`: `varchar`, `DESIG_DEPT_AUTH_KBN`: `int`, `INIT_PASSWD_FLG`: `char`, `ONE_TIME_PASSWD`: `char`, `ONE_TIME_EXPIRY`: `timestamp`, `UPDA_DTE`: `timestamp`, `UPDA_USER_ID`: `int`, `CREA_DTE`: `timestamp`, `CREA_USER_ID`: `int`, `START_GRP_ID`: `int`}
	_              = bytes.MinRead
)

func testUSERMSTSUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(uSERMSTPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(uSERMSTAllColumns) == len(uSERMSTPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUSERMSTSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(uSERMSTAllColumns) == len(uSERMSTPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &USER_MST{}
	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uSERMSTDBTypes, true, uSERMSTPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(uSERMSTAllColumns, uSERMSTPrimaryKeyColumns) {
		fields = uSERMSTAllColumns
	} else {
		fields = strmangle.SetComplement(
			uSERMSTAllColumns,
			uSERMSTPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := USER_MSTSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUSERMSTSUpsert(t *testing.T) {
	t.Parallel()

	if len(uSERMSTAllColumns) == len(uSERMSTPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUSER_MSTUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := USER_MST{}
	if err = randomize.Struct(seed, &o, uSERMSTDBTypes, false); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert USER_MST: %s", err)
	}

	count, err := USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, uSERMSTDBTypes, false, uSERMSTPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize USER_MST struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert USER_MST: %s", err)
	}

	count, err = USERMSTS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
