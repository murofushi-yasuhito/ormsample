// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("NOTICES", testNOTICES)
	t.Run("USERMSTS", testUSERMSTS)
	t.Run("Countries", testCountries)
}

func TestDelete(t *testing.T) {
	t.Run("NOTICES", testNOTICESDelete)
	t.Run("USERMSTS", testUSERMSTSDelete)
	t.Run("Countries", testCountriesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("NOTICES", testNOTICESQueryDeleteAll)
	t.Run("USERMSTS", testUSERMSTSQueryDeleteAll)
	t.Run("Countries", testCountriesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("NOTICES", testNOTICESSliceDeleteAll)
	t.Run("USERMSTS", testUSERMSTSSliceDeleteAll)
	t.Run("Countries", testCountriesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("NOTICES", testNOTICESExists)
	t.Run("USERMSTS", testUSERMSTSExists)
	t.Run("Countries", testCountriesExists)
}

func TestFind(t *testing.T) {
	t.Run("NOTICES", testNOTICESFind)
	t.Run("USERMSTS", testUSERMSTSFind)
	t.Run("Countries", testCountriesFind)
}

func TestBind(t *testing.T) {
	t.Run("NOTICES", testNOTICESBind)
	t.Run("USERMSTS", testUSERMSTSBind)
	t.Run("Countries", testCountriesBind)
}

func TestOne(t *testing.T) {
	t.Run("NOTICES", testNOTICESOne)
	t.Run("USERMSTS", testUSERMSTSOne)
	t.Run("Countries", testCountriesOne)
}

func TestAll(t *testing.T) {
	t.Run("NOTICES", testNOTICESAll)
	t.Run("USERMSTS", testUSERMSTSAll)
	t.Run("Countries", testCountriesAll)
}

func TestCount(t *testing.T) {
	t.Run("NOTICES", testNOTICESCount)
	t.Run("USERMSTS", testUSERMSTSCount)
	t.Run("Countries", testCountriesCount)
}

func TestHooks(t *testing.T) {
	t.Run("NOTICES", testNOTICESHooks)
	t.Run("USERMSTS", testUSERMSTSHooks)
	t.Run("Countries", testCountriesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("NOTICES", testNOTICESInsert)
	t.Run("NOTICES", testNOTICESInsertWhitelist)
	t.Run("USERMSTS", testUSERMSTSInsert)
	t.Run("USERMSTS", testUSERMSTSInsertWhitelist)
	t.Run("Countries", testCountriesInsert)
	t.Run("Countries", testCountriesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("NOTICES", testNOTICESReload)
	t.Run("USERMSTS", testUSERMSTSReload)
	t.Run("Countries", testCountriesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("NOTICES", testNOTICESReloadAll)
	t.Run("USERMSTS", testUSERMSTSReloadAll)
	t.Run("Countries", testCountriesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("NOTICES", testNOTICESSelect)
	t.Run("USERMSTS", testUSERMSTSSelect)
	t.Run("Countries", testCountriesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("NOTICES", testNOTICESUpdate)
	t.Run("USERMSTS", testUSERMSTSUpdate)
	t.Run("Countries", testCountriesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("NOTICES", testNOTICESSliceUpdateAll)
	t.Run("USERMSTS", testUSERMSTSSliceUpdateAll)
	t.Run("Countries", testCountriesSliceUpdateAll)
}
